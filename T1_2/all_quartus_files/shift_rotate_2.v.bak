module shift_rotate_2 (input CLK, SET, CLR, Sr_En, In, 
							output reg[3:0] q);
	wire shift_in = (Sr_En & In) | (~Sr_En & ~q[3]);	

	sr_ff ff0 (.S(q[0]), .R(~q[0]), .CLK(CLK), .SET(SET), .CLR(CLR), .Q(q[0]), .Qn());
  	sr_ff ff1 (.S(q[1]), .R(~q[1]), .CLK_n(CLK), .SET(SET), .CLR(CLR), .Q(q[1]), .Qn());
  	sr_ff ff2 (.S(q[2]), .R(~q[2]), .CLK_n(CLK), .SET(SET), .CLR(CLR), .Q(q[2]), .Qn());
  	sr_ff ff3 (.S(q[3]), .R(~q[3]), .CLK_n(CLK), .SET(SET), .CLR(CLR), .Q(q[3]), .Qn());

endmodule


//   // 2) data nets for each stage
//   wire [3:0] d = { q[2],    // stage 3 takes previous q[2]
//                    q[1],    // stage 2 takes previous q[1]
//                    q[0],    // stage 1 takes previous q[0]
//                    shift_in // stage 0 takes shift_in
//                  };

//   // 3) build R nets = Â¬S nets
//   wire [3:0] r = ~d;